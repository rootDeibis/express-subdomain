{"version":3,"file":"index.js","sourceRoot":"src/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from \"express\";\r\n\r\n\r\n\r\nexport class SubDomainRouter {\r\n\r\n    private staticAssets: any\r\n    private subdomain: string\r\n    private readonly routes: Array<{path: string, method: string, handle: any}> = []\r\n    private readonly router: express.Router =  express.Router();\r\n\r\n    constructor(subdomain: string, app: express.Application) {\r\n        this.subdomain = subdomain;\r\n\r\n        if(!('express_routes_subdomain' in process)) {\r\n            (process as any)['express_routes_subdomain'] = [];\r\n            app.use(SubDomainRouter.handle);\r\n        }\r\n        \r\n        \r\n    \r\n\r\n        app.use(this.router);\r\n        \r\n\r\n        (process as any)['express_routes_subdomain'].push(this);\r\n\r\n\r\n       \r\n    }\r\n\r\n    private static handle(req: Request, res: Response, next: any) {\r\n        const sub = ((process as any)['express_routes_subdomain'] as Array<SubDomainRouter>).find(s => s.isSubdomain(req));\r\n\r\n        if(sub) {\r\n            const route = sub.routes.find(() => sub.isRoute(req));\r\n            if(route) {\r\n                 route.handle(req, res);\r\n            } else if(sub.staticAssets != null) {\r\n                sub.staticAssets(req, res,next);\r\n            }  else {\r\n                res.write(`Cannot ${req.method} ${req.path}`);\r\n                res.end();\r\n            }\r\n\r\n            return;\r\n        } \r\n\r\n        next();\r\n\r\n       \r\n\r\n    }\r\n\r\n\r\n    private route(type: \"get\" | \"post\" | \"delete\" | \"put\", path: string , handle: any) {\r\n        this.routes.push({\r\n            path,\r\n            method: type,\r\n            handle\r\n        });\r\n    }\r\n\r\n    get(path: string, handle: (request: express.Request, respose: express.Response) => void) {\r\n        this.route(\"get\", path, handle);\r\n    }\r\n\r\n    post(path: string,handle: (request: express.Request, respose: express.Response) => void) {\r\n        this.route(\"post\", path, handle);\r\n    }\r\n\r\n    put(path: string,handle: (request: express.Request, respose: express.Response) => void) {\r\n        this.route(\"put\", path, handle);\r\n    }\r\n\r\n    delete(path: string,handle: (request: express.Request, respose: express.Response) => void) {\r\n        this.route(\"delete\", path, handle);\r\n    }\r\n\r\n    static(path: string) {\r\n       this.staticAssets = express.static(path);\r\n\r\n    }\r\n\r\n    public static isUknownSubdomain(req: Request) {\r\n        return req.headers.host && req.headers.host.substring(0, req.headers.host.indexOf(\".\")) != \"\";\r\n    }\r\n\r\n    private isSubdomain(req: Request) {\r\n        return req.headers.host && req.headers.host.substring(0, req.headers.host.indexOf(\".\")) === this.subdomain;\r\n    }\r\n\r\n    private isRoute(request: express.Request): boolean {\r\n        return this.routes.find(route => {\r\n            const paths = route.path.split(\"/\");\r\n            const $paths = request.path.split(\"/\");\r\n\r\n            const builded_path: any[] = [];\r\n\r\n            for(let i in paths) {\r\n                const name: any = paths[i];\r\n                if(name.startsWith(\":\")) {\r\n                    \r\n                    const value = $paths[i];\r\n\r\n                    if(value != \"\") {\r\n                        builded_path.push(paths[i]);\r\n                        (request as any).params[name.substring(1, name.length)] = value;\r\n                    } \r\n\r\n                } else {\r\n                    builded_path.push($paths[i]);\r\n                }\r\n\r\n                \r\n\r\n                \r\n            }\r\n\r\n            return builded_path.join(\"/\") == route.path && route.method == request.method.toLowerCase();\r\n\r\n\r\n       }) != null\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function subdomain(subdomain: string, app: express.Application): SubDomainRouter {\r\n    return new SubDomainRouter(subdomain, app)\r\n}\r\n"]}